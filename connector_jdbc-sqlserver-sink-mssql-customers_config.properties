name = jdbc-sqlserver-sink-mssql-customers
connector.class = io.confluent.connect.jdbc.JdbcSinkConnector
tasks.max = 1
key.converter = org.apache.kafka.connect.storage.StringConverter
value.converter = io.confluent.connect.avro.AvroConverter
header.converter = org.apache.kafka.connect.storage.SimpleHeaderConverter
transforms = flatten
transforms=unwrap,...
transforms.unwrap.type=io.debezium.transforms.ExtractNewRecordState
config.action.reload = restart
errors.retry.timeout = 0
errors.tolerance = none
errors.log.enable = true
errors.log.include.messages = true
topics = server1.dbo.customers
errors.deadletterqueue.topic.name = 
errors.deadletterqueue.context.headers.enable = true
transforms.flatten.type = org.apache.kafka.connect.transforms.Flatten$Value
transforms.flatten.delimiter = .
connection.url = jdbc:sqlserver://host.docker.internal:9999;databaseName=targetDB;
connection.user = sa
connection.password = Password!
insert.mode = upsert
table.name.format = kafka3_customers
pk.mode = record_key
pk.fields = server1.dbo.customers.Value.id
fields.whitelist = 
auto.create = true
auto.evolve = true
max.retries = 1
retry.backoff.ms = 3000
value.converter.schema.registry.url = http://schema-registry:8081
key.converter.schema.registry.url = http://schema-registry:8081